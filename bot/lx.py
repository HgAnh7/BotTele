import re
import zipfile
import telebot
import requests
from io import BytesIO
from telebot import types
from bs4 import BeautifulSoup

TOKEN = "7201356785:AAG_NZqh_6xCcshO--JfNU_K-N8VKVuK2D8"
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# L∆∞u th√¥ng tin theo chat ƒë·ªÉ tr√°nh l·∫´n l·ªôn
chat_data = {}

def get_name_manga(url):
	response = requests.get(url, timeout=10)
	soup = BeautifulSoup(response.text, "html.parser")
	return soup.find("title").text.strip()

def get_cover(url):
	response = requests.get(url, timeout=10)
	soup = BeautifulSoup(response.text, "html.parser")
	
	cover_div = soup.select_one(".cover")
	if not cover_div:
		return None
		
	style = cover_div.get("style", "")
	match = re.search(r"url\(['\"]?(.*?)['\"]?\)", style)
	if not match:
		return None
		
	headers = {"Referer": url, "User-Agent": "Mozilla/5.0"}
	resp = requests.get(match.group(1), headers=headers, timeout=10)
	
	cover_file = BytesIO(resp.content)
	cover_file.name = "cover.jpg"
	return cover_file

def get_chapters_and_urls(url):
	response = requests.get(url, timeout=10)
	soup = BeautifulSoup(response.text, "html.parser")
	
	# L·∫•y t√™n ch∆∞∆°ng
	chapters = []
	img_tags = soup.find_all("img", alt="untag-r")
	for img in img_tags:
		span = img.find_next("span")
		if span:
			chapters.append(span.get_text(strip=True))
	
	# L·∫•y URL ch∆∞∆°ng  
	urls = []
	for a in soup.find_all("a", href=True):
		href = a.get("href", "")
		if href.startswith("/truyen/") and href.count("/") == 3:
			urls.append(f"https://lxmanga.blog{href}")
	
	return chapters, urls[1:] if urls else []

def get_chapter_images(chapter_url):
	headers = {"Referer": chapter_url, "User-Agent": "Mozilla/5.0"}
	response = requests.get(chapter_url, headers=headers, timeout=15)
	soup = BeautifulSoup(response.text, "html.parser")
	
	images = []
	for index, div in enumerate(soup.select("div.text-center div.lazy"), 1):
		img_url = div.get("data-src")
		if img_url:
			r = requests.get(img_url, headers=headers, timeout=10)
			img = BytesIO(r.content)
			img.name = f"{index:03}.jpg"
			images.append(img)
	return images

def create_chapter_zip(manga_name, chapter_title, chapter_url):
	zip_buf = BytesIO()
	with zipfile.ZipFile(zip_buf, "w", zipfile.ZIP_DEFLATED) as zipf:
		images = get_chapter_images(chapter_url)
		if not images:
			return None, "Kh√¥ng c√≥ ·∫£nh"
			
		for i, img in enumerate(images, 1):
			path = f"{manga_name}/{chapter_title}/{i}.jpg"
			zipf.writestr(path, img.getvalue())
	
	zip_buf.seek(0)
	zip_buf.name = "lxm.zip"
	return zip_buf, None

def register_lx(bot):
	@bot.message_handler(commands=['lx'])
	def handle_manga_request(message):
		args = message.text.split(maxsplit=1)
		if len(args) < 2:
			bot.reply_to(message, "üö´ Nh·∫≠p URL truy·ªán c·∫ßn t·∫£i.\nV√≠ d·ª•: /lx https://lxmanga.blog/truyen/...")
			return

		url = args[1]
		chat_id = message.chat.id
		
		if not url.startswith("https://lxmanga.blog/"):
			bot.reply_to(message, "üö´ Ch·ªâ h·ªó tr·ª£ lxmanga.blog")
			return

		# Hi·ªÉn th·ªã ƒëang x·ª≠ l√Ω
		processing_msg = bot.reply_to(message, "‚è≥ ƒêang t·∫£i th√¥ng tin truy·ªán...")

		try:
			manga_name = get_name_manga(url)
			chapters, chapter_urls = get_chapters_and_urls(url)
			
			if not chapters:
				bot.edit_message_text("‚ùå Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng n√†o!", 
									chat_id, processing_msg.message_id)
				return

			# L∆∞u data cho chat n√†y
			chat_data[chat_id] = {
				'manga_name': manga_name,
				'chapters': chapters,
				'urls': chapter_urls,
				'manga_url': url
			}

			# T·∫°o keyboard ch·ªçn ch∆∞∆°ng
			markup = types.InlineKeyboardMarkup(row_width=3)
			
			# T·∫°o n√∫t cho t·ª´ng ch∆∞∆°ng (ƒë·∫£o ng∆∞·ª£c ƒë·ªÉ ch∆∞∆°ng m·ªõi nh·∫•t ·ªü tr√™n)
			buttons = []
			for i in range(len(chapters)):
				buttons.append(types.InlineKeyboardButton(
					text=chapters[i], 
					callback_data=f"ch|{i}"
				))
			
			# Chia th√†nh h√†ng 3 n√∫t
			for i in range(0, len(buttons[::-1]), 3):  # ƒê·∫£o ng∆∞·ª£c
				markup.row(*buttons[::-1][i:i+3])
			
			# N√∫t t·∫£i t·∫•t c·∫£
			markup.add(types.InlineKeyboardButton("üì¶ T·∫£i t·∫•t c·∫£", callback_data="all"))

			# G·ª≠i ·∫£nh b√¨a + menu ch·ªçn
			cover = get_cover(url)
			bot.delete_message(chat_id, processing_msg.message_id)
			
			caption = f"üìö <b>{manga_name}</b>\nüî¢ C√≥ {len(chapters)} ch∆∞∆°ng\n\nüëá Ch·ªçn ch∆∞∆°ng c·∫ßn t·∫£i:"
			
			if cover:
				bot.send_photo(chat_id, cover, caption=caption, reply_markup=markup)
			else:
				bot.send_message(chat_id, caption, reply_markup=markup)
				
		except Exception as e:
			bot.edit_message_text(f"‚ùå L·ªói: {e}", chat_id, processing_msg.message_id)

	# X·ª≠ l√Ω khi ch·ªçn 1 ch∆∞∆°ng
	@bot.callback_query_handler(func=lambda call: call.data.startswith("ch|"))
	def handle_single_chapter(call):
		chat_id = call.message.chat.id
		chapter_index = int(call.data.split("|")[1])
		
		if chat_id not in chat_data:
			bot.answer_callback_query(call.id, "‚ùå H·∫øt h·∫°n, th·ª≠ l·∫°i!", show_alert=True)
			return
		
		data = chat_data[chat_id]
		chapter_title = data['chapters'][chapter_index]
		chapter_url = data['urls'][chapter_index]
		
		# Edit tin nh·∫Øn th√†nh tr·∫°ng th√°i ƒëang t·∫£i
		bot.edit_message_caption(
			caption=f"üì• ƒêang t·∫£i: <b>{chapter_title}</b>...",
			chat_id=chat_id,
			message_id=call.message.message_id
		)
		bot.answer_callback_query(call.id)
		
		try:
			manga_name = data['manga_name']
			zip_file, error = create_chapter_zip(manga_name, chapter_title, chapter_url)
			if error:
				bot.edit_message_caption(
					caption=f"‚ùå L·ªói t·∫£i ch∆∞∆°ng: {error}",
					chat_id=chat_id,
					message_id=call.message.message_id
				)
				return
			
			# Edit th√†nh ho√†n th√†nh v√† g·ª≠i file
			bot.edit_message_caption(
				caption=f"<b>{manga_name}</b>\n‚úÖ T·∫£i th√†nh c√¥ng <b>{chapter_title}</b>",
				chat_id=chat_id,
				message_id=call.message.message_id
			)
			
			bot.send_document(chat_id, zip_file, caption=f"üìÅ {chapter_title}")
			
		except Exception as e:
			bot.edit_message_caption(
				caption=f"‚ùå L·ªói: {e}",
				chat_id=chat_id,
				message_id=call.message.message_id
			)

	# X·ª≠ l√Ω t·∫£i t·∫•t c·∫£ ch∆∞∆°ng
	@bot.callback_query_handler(func=lambda call: call.data == "all")
	def handle_all_chapters(call):
		chat_id = call.message.chat.id
		
		if chat_id not in chat_data:
			bot.answer_callback_query(call.id, "‚ùå H·∫øt h·∫°n, th·ª≠ l·∫°i!", show_alert=True)
			return
		
		data = chat_data[chat_id]
		total = len(data['chapters'])
		
		# Edit tin nh·∫Øn th√†nh tr·∫°ng th√°i ƒëang t·∫£i t·∫•t c·∫£
		bot.edit_message_caption(
			caption=f"üì¶ ƒêang t·∫£i t·∫•t c·∫£ {total} ch∆∞∆°ng...",
			chat_id=chat_id,
			message_id=call.message.message_id
		)
		bot.answer_callback_query(call.id)
		
		try:
			zip_buf = BytesIO()
			manga_name = data['manga_name']
			with zipfile.ZipFile(zip_buf, "w", zipfile.ZIP_DEFLATED) as zipf:
				
				for i, (chapter_title, chapter_url) in enumerate(zip(data['chapters'], data['urls'])):
					# Update progress m·ªói 3 ch∆∞∆°ng
					if i % 3 == 0:
						progress = int((i + 1) / total * 100)
						try:
							bot.edit_message_caption(
								caption=f"üì¶ ƒêang t·∫£i... {i+1}/{total} ({progress}%)\nüìñ {chapter_title}",
								chat_id=chat_id,
								message_id=call.message.message_id
							)
						except:
							pass
					
					# T·∫£i ·∫£nh ch∆∞∆°ng
					images = get_chapter_images(chapter_url)
					for j, img in enumerate(images, 1):
						path = f"{data['manga_name']}/{chapter_title}/{j}.jpg"
						zipf.writestr(path, img.getvalue())
			
			zip_buf.seek(0)
			zip_buf.name = f"{data['manga_name']}.zip"
			
			# Edit th√†nh ho√†n th√†nh
			bot.edit_message_caption(
				caption=f"<b>{manga_name}</b>\n‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {total} ch∆∞∆°ng!",
				chat_id=chat_id,
				message_id=call.message.message_id
			)
			
			bot.send_document(chat_id, zip_buf, caption=f"üì¶ {data['manga_name']} - Full")
			
		except Exception as e:
			bot.edit_message_caption(
				caption=f"‚ùå L·ªói t·∫£i t·∫•t c·∫£: {e}",
				chat_id=chat_id,
				message_id=call.message.message_id
			)
