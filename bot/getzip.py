import requests
from bs4 import BeautifulSoup
from PIL import Image
from io import BytesIO
import os
import zipfile
import tempfile

MIN_WIDTH = 300
MIN_HEIGHT = 300

# === H·ªñ TR·ª¢ ===
def is_valid_image(content):
    """Ki·ªÉm tra xem ·∫£nh c√≥ h·ª£p l·ªá v√† ƒë·ªß k√≠ch th∆∞·ªõc kh√¥ng"""
    try:
        img = Image.open(BytesIO(content))
        return img.width >= MIN_WIDTH and img.height >= MIN_HEIGHT
    except:
        return False

def extract_chapter_info(url):
    """Tr√≠ch xu·∫•t th√¥ng tin manga v√† chapter t·ª´ URL"""
    parts = url.strip('/').split('/')
    try:
        manga_slug = parts[parts.index('truyen') + 1]
        chapter_slug = parts[-1]
        return manga_slug, chapter_slug
    except Exception:
        return "unknown_manga", "unknown_chapter"

def get_manga_images(url):
    """L·∫•y t·∫•t c·∫£ ·∫£nh manga t·ª´ URL v·ªõi x·ª≠ l√Ω lazy loading"""
    try:
        # Headers ƒë·ªÉ gi·∫£ l·∫≠p browser
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Referer': url
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # T√¨m ·∫£nh trong c√°c container ph·ªï bi·∫øn c·ªßa lxmanga
        image_containers = [
            '.reading-content img',
            '.chapter-content img', 
            '.manga-content img',
            '.page-chapter img',
            '#chapter-content img',
            '.entry-content img',
            'div[id*="chapter"] img',
            'div[class*="page"] img'
        ]
        
        img_tags = []
        for selector in image_containers:
            imgs = soup.select(selector)
            if imgs:
                img_tags = imgs
                break
        
        # Fallback: t√¨m t·∫•t c·∫£ img tags nh∆∞ng l·ªçc k·ªπ h∆°n
        if not img_tags:
            all_imgs = soup.find_all('img')
            # Ch·ªâ l·∫•y img c√≥ src ho·∫∑c data-src ch·ª©a ƒë∆∞·ªùng d·∫´n ·∫£nh manga
            img_tags = [img for img in all_imgs if has_manga_src(img)]
        
        return img_tags
        
    except Exception as e:
        print(f"L·ªói khi l·∫•y HTML: {e}")
        return []

def has_manga_src(img_tag):
    """Ki·ªÉm tra xem img tag c√≥ ch·ª©a src c·ªßa ·∫£nh manga kh√¥ng"""
    src = img_tag.get('data-src') or img_tag.get('data-original') or img_tag.get('src') or ''
    
    # C√°c pattern th∆∞·ªùng th·∫•y trong URL ·∫£nh manga
    manga_patterns = [
        '/wp-content/uploads/',
        '/images/manga/',
        '/chapter/',
        '/page/',
        '.jpg',
        '.jpeg', 
        '.png',
        '.webp'
    ]
    
    return any(pattern in src.lower() for pattern in manga_patterns)

def is_loading_gif(src, content=None):
    """Ki·ªÉm tra xem c√≥ ph·∫£i ·∫£nh loading/gif kh√¥ng"""
    if not src:
        return False
        
    # Ki·ªÉm tra URL ch·ª©a t·ª´ kh√≥a loading
    loading_keywords = [
        'loading', 'spinner', 'load', 'wait', 'preload',
        'lxmanga.com', 'lxers', 'logo', 'watermark',
        'gif', 'placeholder', 'lazy'
    ]
    
    src_lower = src.lower()
    if any(keyword in src_lower for keyword in loading_keywords):
        return True
    
    # Ki·ªÉm tra content n·∫øu c√≥
    if content:
        try:
            img = Image.open(BytesIO(content))
            # ·∫¢nh loading th∆∞·ªùng c√≥ k√≠ch th∆∞·ªõc nh·ªè v√† l√† GIF
            if img.format == 'GIF' and (img.width < 200 or img.height < 200):
                return True
            # ·∫¢nh c√≥ k√≠ch th∆∞·ªõc gi·ªëng logo lxmanga
            if img.width == img.height and img.width < 300:
                return True
        except:
            pass
    
    return False

def register_getzip(bot):
    @bot.message_handler(commands=['getzip'])
    def handle_getzip(message):
        # L·∫•y URL t·ª´ tin nh·∫Øn
        url = message.text.replace('/getzip', '').strip()
        
        if not url.startswith("http"):
            bot.reply_to(message, "‚ùå G·ª≠i link h·ª£p l·ªá nh√© b·∫°n.\n\nüìù **C√°ch s·ª≠ d·ª•ng:**\n`/getzip https://lxmanga.blog/truyen/manga-name/chapter`", parse_mode="Markdown")
            return
        
        # Tr√≠ch xu·∫•t th√¥ng tin manga v√† chapter
        manga_slug, chapter_slug = extract_chapter_info(url)
        
        # Th√¥ng b√°o b·∫Øt ƒë·∫ßu
        status_msg = bot.send_message(
            message.chat.id, 
            f"‚è≥ ƒêang t·∫£i ·∫£nh: *{manga_slug} / {chapter_slug}*\nüîç ƒêang ph√¢n t√≠ch trang...", 
            parse_mode="Markdown"
        )
        
        try:
            # L·∫•y danh s√°ch ·∫£nh t·ª´ trang web
            img_tags = get_manga_images(url)
            
            if not img_tags:
                bot.edit_message_text(
                    "‚ùå Kh√¥ng th·ªÉ truy c·∫≠p trang web.\nüí° **Th·ª≠:**\n‚Ä¢ Ki·ªÉm tra link\n‚Ä¢ S·ª≠ d·ª•ng VPN",
                    message.chat.id,
                    status_msg.message_id,
                    parse_mode="Markdown"
                )
                return
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            bot.edit_message_text(
                f"‚è≥ ƒêang t·∫£i ·∫£nh: *{manga_slug} / {chapter_slug}*\nüì• T√¨m th·∫•y {len(img_tags)} ·∫£nh, ƒëang t·∫£i...",
                message.chat.id,
                status_msg.message_id,
                parse_mode="Markdown"
            )
            
            images = []
            valid_count = 0
            
            for i, img in enumerate(img_tags):
                # ∆Øu ti√™n l·∫•y ·∫£nh th·ª±c t·∫ø t·ª´ lazy-loading
                src = img.get('data-src') or img.get('data-original') or img.get('src')
                if not src:
                    continue
                
                # Chuy·ªÉn ƒë·ªïi URL t∆∞∆°ng ƒë·ªëi th√†nh tuy·ªát ƒë·ªëi
                if src.startswith('//'):
                    src = 'https:' + src
                elif src.startswith('/'):
                    from urllib.parse import urljoin
                    src = urljoin(url, src)
                
                # KI·ªÇM TRA QUAN TR·ªåNG: B·ªè qua ·∫£nh loading/gif
                if is_loading_gif(src):
                    print(f"B·ªè qua ·∫£nh loading: {src}")
                    continue
                
                try:
                    # Headers cho request ·∫£nh
                    img_headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                        'Referer': url,
                        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
                    }
                    
                    r = requests.get(src, headers=img_headers, timeout=15)
                    r.raise_for_status()
                    
                    # Ki·ªÉm tra k√©p: c·∫£ URL v√† n·ªôi dung
                    if is_loading_gif(src, r.content):
                        print(f"B·ªè qua ·∫£nh loading (sau khi t·∫£i): {src}")
                        continue
                    
                    if is_valid_image(r.content):
                        # Ki·ªÉm tra cu·ªëi: ƒë·∫£m b·∫£o kh√¥ng ph·∫£i ·∫£nh vu√¥ng nh·ªè (logo)
                        try:
                            img = Image.open(BytesIO(r.content))
                            # B·ªè ·∫£nh vu√¥ng c√≥ k√≠ch th∆∞·ªõc nh·ªè (th∆∞·ªùng l√† logo)
                            if img.width == img.height and img.width < 400:
                                print(f"B·ªè qua logo/·∫£nh vu√¥ng: {src} ({img.width}x{img.height})")
                                continue
                            # ·∫¢nh manga th∆∞·ªùng c√≥ t·ª∑ l·ªá d·ªçc
                            if img.height < img.width * 0.8:  # Qu√° ngang, c√≥ th·ªÉ l√† banner
                                print(f"B·ªè qua ·∫£nh ngang: {src} ({img.width}x{img.height})")
                                continue
                        except:
                            pass
                        
                        # ƒê·∫∑t t√™n file theo th·ª© t·ª±
                        filename = f'page_{valid_count + 1:03d}.jpg'
                        images.append((filename, r.content))
                        valid_count += 1
                        print(f"ƒê√£ t·∫£i ·∫£nh h·ª£p l·ªá: {src}")
                        
                        # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô m·ªói 3 ·∫£nh (ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ti·∫øn ƒë·ªô)
                        if valid_count % 3 == 0:
                            bot.edit_message_text(
                                f"‚è≥ ƒêang t·∫£i ·∫£nh: *{manga_slug} / {chapter_slug}*\nüì• ƒê√£ t·∫£i: {valid_count} ·∫£nh h·ª£p l·ªá...",
                                message.chat.id,
                                status_msg.message_id,
                                parse_mode="Markdown"
                            )
                        
                except Exception as e:
                    print(f"L·ªói t·∫£i ·∫£nh {src}: {e}")
                    continue
            
            if not images:
                bot.edit_message_text(
                    "‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh ph√π h·ª£p.\n\nüí° **C√≥ th·ªÉ do:**\n‚Ä¢ Trang y√™u c·∫ßu VPN\n‚Ä¢ C·∫•u tr√∫c web ƒë√£ thay ƒë·ªïi\n‚Ä¢ ·∫¢nh b·ªã b·∫£o v·ªá",
                    message.chat.id,
                    status_msg.message_id,
                    parse_mode="Markdown"
                )
                return
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√©n file
            bot.edit_message_text(
                f"‚è≥ ƒêang t·∫£i ·∫£nh: *{manga_slug} / {chapter_slug}*\nüóúÔ∏è ƒêang n√©n {len(images)} ·∫£nh th√†nh ZIP...",
                message.chat.id,
                status_msg.message_id,
                parse_mode="Markdown"
            )
            
            # N√©n ·∫£nh v√†o file zip
            with tempfile.NamedTemporaryFile(delete=False, suffix=".zip") as tmp_zip_file:
                with zipfile.ZipFile(tmp_zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for filename, content in images:
                        arc_path = f"{manga_slug}/{chapter_slug}/{filename}"
                        zipf.writestr(arc_path, content)
                zip_path = tmp_zip_file.name
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            zip_size = os.path.getsize(zip_path)
            zip_size_mb = zip_size / (1024 * 1024)
            
            if zip_size_mb > 50:  # Telegram limit 50MB
                bot.edit_message_text(
                    f"‚ùå File qu√° l·ªõn ({zip_size_mb:.1f}MB > 50MB)\nüí° **Th·ª≠ t√°ch nh·ªè chapter ho·∫∑c gi·∫£m ch·∫•t l∆∞·ª£ng**",
                    message.chat.id,
                    status_msg.message_id,
                    parse_mode="Markdown"
                )
                os.remove(zip_path)
                return
            
            # G·ª≠i file zip cho ng∆∞·ªùi d√πng
            with open(zip_path, 'rb') as f:
                bot.send_document(
                    message.chat.id, 
                    f, 
                    caption=f"üì¶ **{manga_slug} / {chapter_slug}**\nüìä {len(images)} ·∫£nh | {zip_size_mb:.1f}MB",
                    parse_mode="Markdown"
                )
            
            # X√≥a tin nh·∫Øn tr·∫°ng th√°i
            bot.delete_message(message.chat.id, status_msg.message_id)
            
            # X√≥a file t·∫°m
            os.remove(zip_path)
            
        except Exception as e:
            bot.edit_message_text(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói:\n`{str(e)}`\n\nüí° **Th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra link**",
                message.chat.id,
                status_msg.message_id,
                parse_mode="Markdown"
            )