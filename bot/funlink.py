import time
import random
import requests
import threading
from telebot.types import Message

SOURCES = {
    '188bet': 'https://88bet.hiphop',
    'w88': 'https://w88vt.com',
    'fun88': 'https://fun88kyc.com',
    'daga': 'https://stelizabeth.co.uk',
    'kubet': 'https://www.randalls.uk.com',
    '8xbet 8xbetvina.com': 'https://8xbetvina.com',
    'trang c√° c∆∞·ª£c': 'https://chisholmunitedfc.com',
    'lu88 vnco': 'https://lu88vn.co.uk',
    'm88lu': 'https://m88lu.io',
}

def process_funlink_step(bot, message, wait_msg, origin, headers):
    for remaining in range(60, 0, -5):
        try:
            bot.edit_message_text(
                f"‚è≥ ƒêang x·ª≠ l√Ω... vui l√≤ng ch·ªù {remaining} gi√¢y.",
                message.chat.id,
                wait_msg.message_id
            )
        except:
            pass
        time.sleep(5)

    headers['content-type'] = 'application/json'
    json_data = {
        'screen': '1000 x 800',
        'browser_name': 'Safari',
        'browser_version': '100.0.0.0',
        'browser_major_version': '137',
        'is_mobile': False,
        'os_name': 'skibidiOS',
        'os_version': '10000000',
        'is_cookies': True,
        'href': origin + '/',
        'user_agent': headers['user-agent'],
        'hostname': origin,
    }

    try:
        response = requests.post('https://public.funlink.io/api/code/code', headers=headers, json=json_data)
        if response.status_code == 200:
            try:
                dat = response.json()
                code = dat.get('code')
                if code:
                    bot.edit_message_text(
                        f" ¬ª <b>M√£ c·ªßa b·∫°n l√†:</b> <blockquote>{code}</blockquote>\nüéâ H√£y nh·∫≠p m√£ ƒë·ªÉ l·∫•y link ƒë√≠ch.",
                        message.chat.id,
                        wait_msg.message_id,
                    )
                else:
                    bot.edit_message_text("‚ùå Kh√¥ng t√¨m th·∫•y m√£ trong ph·∫£n h·ªìi.", message.chat.id, wait_msg.message_id)
            except Exception as e:
                bot.edit_message_text(f"‚ùå L·ªói x·ª≠ l√Ω JSON: {e}", message.chat.id, wait_msg.message_id)
        else:
            bot.edit_message_text(f"‚ùå Th·∫•t b·∫°i b∆∞·ªõc 2: {response.status_code}", message.chat.id, wait_msg.message_id)
    except Exception as e:
        bot.edit_message_text(f"‚ùå L·ªói g·ª≠i request b∆∞·ªõc 2: {e}", message.chat.id, wait_msg.message_id)


def register_funlink(bot):
    @bot.message_handler(commands=['fl'])
    def handle_get_code(message: Message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, "üö´ Vui l√≤ng nh·∫≠p link Funlink c·∫ßn v∆∞·ª£t.\nV√≠ d·ª•: /fl https://funlink.io/PS3HIRn")
            return

        url = args[1].strip().lower()
        match = re.search(r'funlink\.io/([a-zA-Z0-9]+)', url)
        if not match:
            bot.reply_to(message, "üö´ Link kh√¥ng h·ª£p l·ªá.")
            return

        link_id = match.group(1)
        rad = str(random.randint(100000, 999999))
        
        # G·ª≠i tin nh·∫Øn ban ƒë·∫ßu
        wait_msg = bot.send_message(
            message.chat.id,
            "‚è≥ ƒêang d√≤ nhi·ªám v·ª• h·ªó tr·ª£ cho link `{link_id}`...",
            reply_to_message_id=message.message_id
        )

        # L·∫∑p ƒë·∫øn khi nhi·ªám v·ª• h·ª£p l·ªá
        retry = 0
        max_retry = 20
        keyword = ""
        keyword_id = ""

        while retry < max_retry:
            retry += 1
            try:
                r = requests.get(
                    'https://public.funlink.io/api/code/renew-key',
                    params={'ignoreId': rad, 'id': link_id},
                    headers={
                        'accept': '*/*',
                        'origin': 'https://funlink.io',
                        'referer': 'https://funlink.io/',
                        'rid': rad,
                        'user-agent': 'Mozilla/5.0'
                    },
                    timeout=10
                )
                if r.status_code == 200:
                    j = r.json()
                    keyword = j['data_keyword']['keyword_text'].lower()
                    keyword_id = j['data_keyword']['id']
                    if keyword in SOURCES:
                        break
                    else:
                        bot.edit_message_text(
                            f"‚è≥ Nhi·ªám v·ª• hi·ªán t·∫°i ch∆∞a h·ªó tr·ª£: `{keyword}`\nƒêang th·ª≠ l·∫°i... (l·∫ßn {retry})",
                            message.chat.id,
                            wait_msg.message_id,
                            parse_mode="Markdown"
                        )
                else:
                    bot.edit_message_text(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c nhi·ªám v·ª•. Th·ª≠ l·∫°i... ({r.status_code})",
                                          message.chat.id, wait_msg.message_id)
            except Exception as e:
                bot.edit_message_text(f"‚ö†Ô∏è L·ªói trong l√∫c l·∫•y nhi·ªám v·ª•: {e}",
                                      message.chat.id, wait_msg.message_id)
            time.sleep(3)


        if keyword not in SOURCES:
            bot.edit_message_text(
                f"üö´ Sau {max_retry} l·∫ßn th·ª≠, nhi·ªám v·ª• v·∫´n ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£.\nLo·∫°i nh·∫≠n ƒë∆∞·ª£c: `{keyword}`",
                message.chat.id,
                wait_msg.message_id,
                parse_mode="Markdown"
            )
            return

        # fresponse = requests.options('https://public.funlink.io/api/code/ch', headers=headers)
        # if fresponse.status_code != 200:
        #     bot.edit_message_text(f"‚ùå Th·∫•t b·∫°i b∆∞·ªõc 1: {fresponse.status_code}", message.chat.id, wait_msg.message_id)
        #     return
            
        # threading.Thread(
        #     target=process_funlink_step,
        #     args=(bot, message, wait_msg, origin, headers),
        #     daemon=True
        # ).start()


        origin = SOURCES[keyword]
        headers = {
            'accept': '*/*',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'origin': origin,
            'priority': 'u=1, i',
            'referer': origin + '/',
            'rid': rad,
            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5_2) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15',
        }

        bot.edit_message_text(
            f"‚úÖ ƒê√£ t√¨m th·∫•y nhi·ªám v·ª• `{keyword}`.\n‚è≥ ƒêang g·ª≠i y√™u c·∫ßu b∆∞·ªõc 1...",
            message.chat.id,
            wait_msg.message_id,
            parse_mode="Markdown"
        )

        fresponse = requests.options('https://public.funlink.io/api/code/ch', headers=headers)
        if fresponse.status_code != 200:
            bot.edit_message_text(f"‚ùå Th·∫•t b·∫°i b∆∞·ªõc 1: {fresponse.status_code}", message.chat.id, wait_msg.message_id)
            return

        threading.Thread(
            target=process_funlink_step,
            args=(bot, message, wait_msg, origin, headers),
            daemon=True
        ).start()
